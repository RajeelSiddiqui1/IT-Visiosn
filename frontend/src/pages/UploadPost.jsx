import React, { useState } from 'react';
import usePost from '../hooks/usePost';
import { useNavigate } from 'react-router';
import { toast } from 'react-hot-toast';
import { Loader2, Mic, MicOff } from 'lucide-react';
import useSpeechToText from '../hooks/useSpeechToText';

const UploadPost = () => {
  const [postData, setPostData] = useState({
    title: '',
    description: '',
    attachments: null,
  });

  const [showLoader, setShowLoader] = useState(false);
  const [activeField, setActiveField] = useState(null); // 'title' or 'description'
  const { isPending, postMutation } = usePost();
  const navigate = useNavigate();
  
  // Speech-to-text hook
  const {
    isListening,
    transcript,
    isSupported: speechSupported,
    startListening,
    stopListening,
    resetTranscript
  } = useSpeechToText();

  // Handle speech transcript updates
  React.useEffect(() => {
    if (transcript && activeField) {
      setPostData(prev => ({
        ...prev,
        [activeField]: prev[activeField] + transcript
      }));
      resetTranscript();
    }
  }, [transcript, activeField, resetTranscript]);

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'attachments') {
      setPostData({ ...postData, attachments: files[0] });
    } else {
      setPostData({ ...postData, [name]: value });
    }
  };

  const handleSpeechToggle = (fieldName) => {
    if (isListening && activeField === fieldName) {
      // Stop listening if already listening to this field
      stopListening();
      setActiveField(null);
      toast.success('Voice recording stopped', {
        duration: 2000,
        position: 'bottom-center',
      });
    } else {
      if (!speechSupported) {
        toast.error('Speech recognition is not supported in your browser', {
          duration: 3000,
          position: 'bottom-center',
        });
        return;
      }
      
      // Stop any existing recording and start new one
      if (isListening) {
        stopListening();
      }
      
      setActiveField(fieldName);
      startListening();
      toast.success(`Voice recording started for ${fieldName}`, {
        duration: 2000,
        position: 'bottom-center',
      });
    }
  };

  const handlePost = (e) => {
    e.preventDefault();
    
    // Stop any active recording before submitting
    if (isListening) {
      stopListening();
      setActiveField(null);
    }
    
    setShowLoader(true);

    setTimeout(() => {
      const formData = new FormData();
      formData.append('title', postData.title);
      formData.append('description', postData.description);
      if (postData.attachments) {
        formData.append('attachments', postData.attachments);
      }

      postMutation(formData, {
        onSuccess: (data) => {
          toast.success('Post uploaded successfully!');
          if (data?.generatedByAI) {
            toast('Your description was generated by AI ü§ñ', {
              icon: 'ü§ñ',
              style: { background: '#333', color: '#fff' },
            });
          }
          navigate('/');
        },
        onError: (err) => {
          console.error("üß® Full error object:", err);

          const backendMessage = err?.response?.data?.error;
          const message = backendMessage || err?.message || "Upload failed";

          if (message.includes("Information Technology")) {
            toast.error("‚ùå Only IT-related posts are allowed!");
          } else {
            toast.error(message);
          }
        },

      });

      setShowLoader(false);
    }, 5000);
  };

  return (
    <div className="max-w-xl mx-auto p-6 rounded-xl mt-3 border shadow backdrop-blur-md">
      <h2 className="text-2xl font-semibold mb-4">Upload Post</h2>
      <form onSubmit={handlePost} className="space-y-4">
        <div>
          <label className="block mb-1 font-medium">
            Title
            {speechSupported && (
              <button
                type="button"
                onClick={() => handleSpeechToggle('title')}
                className={`ml-2 p-1 rounded transition-colors ${
                  isListening && activeField === 'title'
                    ? 'text-red-500 bg-red-100 dark:bg-red-900/20'
                    : 'text-gray-500 hover:text-gray-700 dark:hover:text-gray-300'
                }`}
                title={isListening && activeField === 'title' ? 'Stop recording title' : 'Record title with voice'}
              >
                {isListening && activeField === 'title' ? (
                  <MicOff size={16} className="animate-pulse" />
                ) : (
                  <Mic size={16} />
                )}
              </button>
            )}
          </label>
          <div className="relative">
            <input
              type="text"
              name="title"
              value={postData.title}
              onChange={handleChange}
              className={`w-full border rounded px-3 py-2 bg-transparent outline-none ${
                isListening && activeField === 'title'
                  ? 'border-red-500 ring-2 ring-red-200 dark:ring-red-800'
                  : ''
              }`}
              placeholder={isListening && activeField === 'title' ? 'Listening... speak now' : 'Enter post title'}
              required
            />
            {isListening && activeField === 'title' && (
              <div className="absolute right-2 top-1/2 transform -translate-y-1/2">
                <div className="flex items-center gap-1 text-red-500 text-xs">
                  <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                  Recording
                </div>
              </div>
            )}
          </div>
        </div>
        <div>
          <label className="block mb-1 font-medium">
            Description
            {speechSupported && (
              <button
                type="button"
                onClick={() => handleSpeechToggle('description')}
                className={`ml-2 p-1 rounded transition-colors ${
                  isListening && activeField === 'description'
                    ? 'text-red-500 bg-red-100 dark:bg-red-900/20'
                    : 'text-gray-500 hover:text-gray-700 dark:hover:text-gray-300'
                }`}
                title={isListening && activeField === 'description' ? 'Stop recording description' : 'Record description with voice'}
              >
                {isListening && activeField === 'description' ? (
                  <MicOff size={16} className="animate-pulse" />
                ) : (
                  <Mic size={16} />
                )}
              </button>
            )}
          </label>
          <div className="relative">
            <textarea
              name="description"
              value={postData.description}
              onChange={handleChange}
              rows="4"
              className={`w-full border rounded px-3 py-2 bg-transparent outline-none resize-none ${
                isListening && activeField === 'description'
                  ? 'border-red-500 ring-2 ring-red-200 dark:ring-red-800'
                  : ''
              }`}
              placeholder={isListening && activeField === 'description' ? 'Listening... speak now' : 'Enter post description'}
              required
            ></textarea>
            {isListening && activeField === 'description' && (
              <div className="absolute right-2 top-2">
                <div className="flex items-center gap-1 text-red-500 text-xs">
                  <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                  Recording
                </div>
              </div>
            )}
          </div>
        </div>
        <div>
          <label className="block mb-1 font-medium">Attachment</label>
          <input
            type="file"
            name="attachments"
            onChange={handleChange}
            className="w-full"
          />
        </div>
        <button
          type="submit"
          className={`w-full py-2 px-4 rounded transition ${isPending || showLoader ? 'bg-gray-600 cursor-not-allowed' : 'bg-gray-800 hover:bg-gray-700'}`}
          disabled={isPending || showLoader}
        >
          {isPending || showLoader ? (
            <div className="flex items-center justify-center gap-2">
              <Loader2 className="animate-spin w-5 h-5" />
              Generating your description...
            </div>
          ) : (
            'Upload Post'
          )}
        </button>
      </form>
    </div>
  );
};

export default UploadPost;