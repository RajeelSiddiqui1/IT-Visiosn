import { useState } from "react";
import { useAddComment, useComments } from "../hooks/useComments";
import CommentThread from "./CommentThread";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSort, faComment, faChevronDown, faChevronUp } from "@fortawesome/free-solid-svg-icons";

const PostComment = ({ postId, user }) => {
  const [text, setText] = useState("");
  const [sortBy, setSortBy] = useState("top"); // top or newest
  const [isExpanded, setIsExpanded] = useState(false);
  const [visibleComments, setVisibleComments] = useState(3);
  const [autoComments, setAutoComments] = useState([]);
  const { mutate: addComment, isPending } = useAddComment();
  const { data: comments = [], isLoading } = useComments(postId);

  // Random comment generator (simulating auto-generated comments like FB/YouTube)
  const generateRandomComment = () => {
    const randomComments = [
      "Great post! Thanks for sharing 👍",
      "This is really helpful, appreciate it!",
      "Interesting perspective on this topic",
      "Love this content! Keep it up 🔥",
      "Thanks for the insights, very informative",
      "This made my day! Amazing work",
      "Couldn't agree more with this",
      "Brilliant explanation, well done!",
      "This is exactly what I was looking for",
      "Fantastic content as always! 💯",
      "Really enjoyed reading this",
      "Such valuable information, thank you!",
      "This deserves more attention",
      "Perfectly explained, thanks!",
      "Amazing work, keep posting more like this"
    ];
    
    const randomUsers = [
      { name: "Alex Johnson", pic: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face" },
      { name: "Sarah Chen", pic: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face" },
      { name: "Mike Rodriguez", pic: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face" },
      { name: "Emma Wilson", pic: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face" },
      { name: "David Kim", pic: "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=100&h=100&fit=crop&crop=face" },
      { name: "Lisa Thompson", pic: "https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=100&h=100&fit=crop&crop=face" }
    ];

    const randomComment = randomComments[Math.floor(Math.random() * randomComments.length)];
    const randomUser = randomUsers[Math.floor(Math.random() * randomUsers.length)];
    const randomLikes = Math.floor(Math.random() * 50) + 1;
    const randomMinutesAgo = Math.floor(Math.random() * 120) + 1;

    return {
      _id: `auto-${Date.now()}-${Math.random()}`,
      text: randomComment,
      user: {
        fullName: randomUser.name,
        profilePic: randomUser.pic
      },
      likes: Array(randomLikes).fill({}),
      createdAt: new Date(Date.now() - randomMinutesAgo * 60000).toISOString(),
      isAutoGenerated: true
    };
  };

  // Auto-generate comments periodically when expanded
  useState(() => {
    if (isExpanded) {
      const interval = setInterval(() => {
        if (Math.random() < 0.3) { // 30% chance every 10 seconds
          const newComment = generateRandomComment();
          setAutoComments(prev => [newComment, ...prev].slice(0, 5)); // Keep max 5 auto comments
        }
      }, 10000);
      
      return () => clearInterval(interval);
    }
  }, [isExpanded]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!text.trim()) return;

    addComment({ postId, commentData: { text } });
    setText("");
  };

  const handleToggleComments = () => {
    setIsExpanded(!isExpanded);
    if (!isExpanded) {
      // Generate initial auto comments when first expanded
      const initialAutoComments = Array.from({ length: 2 }, () => generateRandomComment());
      setAutoComments(initialAutoComments);
    }
  };

  const handleLoadMore = () => {
    setVisibleComments(prev => prev + 5);
  };

  // Sort comments based on selection
  const allComments = [...comments, ...autoComments];
  const sortedComments = [...allComments].sort((a, b) => {
    if (sortBy === "top") {
      return (b.likes?.length || 0) - (a.likes?.length || 0);
    }
    return new Date(b.createdAt) - new Date(a.createdAt); // newest
  });

  const displayedComments = sortedComments.slice(0, visibleComments);
  const hasMoreComments = sortedComments.length > visibleComments;

  return (
    <div className="font-roboto text-white">
      {/* Comment Toggle Button */}
      <button
        onClick={handleToggleComments}
        className="flex items-center gap-3 p-4 w-full hover:bg-gray-800/50 transition-colors border-t border-gray-700"
      >
        <FontAwesomeIcon icon={faComment} className="text-gray-400" />
        <span className="text-gray-300">
          {allComments.length} {allComments.length === 1 ? "Comment" : "Comments"}
        </span>
        <FontAwesomeIcon 
          icon={isExpanded ? faChevronUp : faChevronDown} 
          className="text-gray-400 ml-auto" 
        />
      </button>

      {/* Expanded Comment Section */}
      {isExpanded && (
        <div className="space-y-6 p-4 bg-gray-900/30">
          {/* Comment Count and Sort Dropdown */}
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium">
              {allComments.length} {allComments.length === 1 ? "Comment" : "Comments"}
            </h3>
            <div className="flex items-center gap-2">
              <FontAwesomeIcon icon={faSort} className="text-gray-400" />
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="bg-gray-800 text-white border-gray-700 border rounded-md p-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="top">Top Comments</option>
                <option value="newest">Newest First</option>
              </select>
            </div>
          </div>

          {/* Comment Form */}
          <form onSubmit={handleSubmit} className="flex flex-col gap-3">
            <div className="flex items-start gap-3">
              <img
                src={user?.profilePic || "https://as2.ftcdn.net/jpg/05/49/98/39/1000_f_549983970_brckyfk0p6pp5fkbmhzmib07mcj6esxl.webp"}
                alt="User ProfilePic"
                className="w-10 h-10 rounded-full"
              />
              <textarea
                value={text}
                onChange={(e) => setText(e.target.value)}
                className="flex-1 bg-transparent border-b border-gray-600 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 py-2 resize-none text-sm"
                placeholder="Add a comment..."
                rows={2}
              />
            </div>
            <div className="flex justify-end gap-2">
              <button
                type="button"
                onClick={() => setText("")}
                className="text-gray-400 hover:text-gray-200 text-sm px-4 py-1"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={isPending || !text.trim()}
                className={`px-4 py-1 rounded-full text-sm font-medium transition-colors ${
                  isPending || !text.trim()
                    ? "bg-gray-600 text-gray-400 cursor-not-allowed"
                    : "bg-blue-600 text-white hover:bg-blue-700"
                }`}
              >
                {isPending ? "Posting..." : "Comment"}
              </button>
            </div>
          </form>

          {/* Comment List */}
          <div className="space-y-4">
            {isLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                <span className="ml-3 text-gray-400">Loading comments...</span>
              </div>
            ) : (
              <>
                {displayedComments.map((comment) => (
                  <div key={comment._id} className="relative">
                    <CommentThread comment={comment} postId={postId} />
                    {comment.isAutoGenerated && (
                      <div className="absolute top-2 right-2">
                        <span className="text-xs bg-blue-600/20 text-blue-400 px-2 py-1 rounded-full">
                          Auto
                        </span>
                      </div>
                    )}
                  </div>
                ))}
                
                {hasMoreComments && (
                  <button
                    onClick={handleLoadMore}
                    className="w-full py-3 text-blue-400 hover:text-blue-300 hover:bg-gray-800/50 rounded-lg transition-colors text-sm font-medium"
                  >
                    Load more comments ({sortedComments.length - visibleComments} remaining)
                  </button>
                )}
                
                {sortedComments.length === 0 && (
                  <div className="text-center py-8 text-gray-400">
                    <FontAwesomeIcon icon={faComment} className="text-4xl mb-3 opacity-50" />
                    <p>No comments yet. Be the first to comment!</p>
                  </div>
                )}
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default PostComment;